﻿@model StackOverflowProject.ViewModels.QuestionViewModel

@{
    ViewBag.Title = "View Question";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">

            <div class="row mb-4">
                <div class="col-md-10 offset-md-2">
                    <h3>@Model.QuestionName</h3>
                    <div class="row mb-2">
                        <div class="col-md-3">
                            <span class="badge bg-info">@Model.Category.CategoryName</span>
                        </div>
                        <div class="col-md-3">
                            <span class="text-info">
                                @if (Convert.ToInt32(Session["CurrentUserID"]) != Model.UserID)
                                {
                                    @:by @Model.User.Name
                                }
                                else
                                {
                                    @:by you
                                }
                            </span>
                        </div>
                        <div class="col-md-3">
                            <span class="text-success">on @Model.QuestionDateAndTime</span>
                        </div>
                        <div class="col-md-3">
                            <span class="badge bg-success">@Model.ViewsCount</span> Views
                        </div>
                    </div>

                    @if (Model.AnswersCount == 0)
                    {
                        <p class="text-danger">No answers yet!</p>
                    }
                </div>
            </div>

            @for (int i = 0; i < Model.Answers.Count; i++)
            {
                <div class="row mb-4">
                    <div class="col-md-2 text-center">
                        <span class="badge bg-secondary votescount">@Model.Answers[i].VotesCount</span> Votes

                        @if (Session["CurrentUserName"] != null && Convert.ToInt32(Session["CurrentUserID"]) != Model.Answers[i].UserID)
                        {
                            <div class="d-flex justify-content-center">
                                @if (Model.Answers[i].CurrentUserVoteType == 1)
                                {
                                    <img src="~/Images/up-color.png" class="btnUpVote" style="cursor:pointer" width="24px" data-answerid="@Model.Answers[i].AnswerID" />
                                    <img src="~/Images/down-empty.png" class="btnDownVote" style="cursor:pointer" width="24px" data-answerid="@Model.Answers[i].AnswerID" />
                                }
                                else if (Model.Answers[i].CurrentUserVoteType == -1)
                                {
                                    <img src="~/Images/up-empty.png" class="btnUpVote" style="cursor:pointer" width="24px" data-answerid="@Model.Answers[i].AnswerID" />
                                    <img src="~/Images/down-color.png" class="btnDownVote" style="cursor:pointer" width="24px" data-answerid="@Model.Answers[i].AnswerID" />
                                }
                                else
                                {
                                    <img src="~/Images/up-empty.png" class="btnUpVote" style="cursor:pointer" width="24px" data-answerid="@Model.Answers[i].AnswerID" />
                                    <img src="~/Images/down-empty.png" class="btnDownVote" style="cursor:pointer" width="24px" data-answerid="@Model.Answers[i].AnswerID" />
                                }
                            </div>
                        }
                    </div>

                    <div class="col-md-8">
                        @if (Convert.ToInt32(Session["CurrentUserID"]) != Model.Answers[i].UserID)
                        {
                            <p>@Model.Answers[i].AnswerText</p>
                        }
                        else
                        {
                            <p class="answer">@Model.Answers[i].AnswerText</p>
                            <button class="btn btn-info editbutton">Edit</button>

                            <form class=" needs-validation hidden mt-3" novalidate action="/questions/editanswer" method="post" id="editForm">
                                <div class="form-group">
                                    <h5>Edit your answer</h5>

                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="AnswerID" value="@Model.Answers[i].AnswerID" />
                                    <input type="hidden" name="QuestionID" value="@Model.Answers[i].QuestionID" />
                                    <textarea class="form-control" id="txtAnswer" placeholder="Enter answer" name="AnswerText" required>@Model.Answers[i].AnswerText</textarea>
                                    <div class="valid-feedback">Looks good!</div>
                                    <div class="invalid-feedback">Please enter your answer.</div>

                                    <button type="submit" class="btn btn-primary mt-2">Update Answer</button>
                                    <div class="text-danger">@Html.ValidationSummary()</div>
                                </div>
                            </form>
                        }
                    </div>

                    <div class="col-md-2 text-end">
                        <small class="text-muted">
                            by
                            @if (Convert.ToInt32(Session["CurrentUserID"]) != Model.Answers[i].UserID)
                            {
                                @Model.Answers[i].User.Name
                            }
                            else
                            {
                                @:you
                            }
                        </small>
                        <div>on @Model.Answers[i].AnswerDateAndTime</div>
                    </div>
                </div>
            }

            @if (Session["CurrentUsername"] != null)
            {
                <form class="needs-validation" novalidate action="/questions/addanswer" method="post" id="newForm">
                    <div class="row mb-4">
                        <div class="col-12">
                            <h4>Add your answer</h4>

                            @Html.AntiForgeryToken()
                            <input type="hidden" name="QuestionID" value="@Model.QuestionID" />
                            <textarea class="form-control" id="txtAnswer" placeholder="Enter answer" name="AnswerText" required></textarea>
                            <div class="valid-feedback">Looks good!</div>
                            <div class="invalid-feedback">Please enter your answer.</div>

                            <button type="submit" class="btn btn-primary mt-2">Add Answer</button>
                            <div class="text-danger">@Html.ValidationSummary()</div>
                        </div>
                    </div>
                </form>
            }
        </div>
    </div>
</div>


<script>
$(".btnUpVote").click(function () {
    var UpBtn = $(this);
    var DownBtn = UpBtn.parent().find(".btnDownVote");
    var votesCountElement = UpBtn.parent().find(".votescount");

    // Only proceed if the button isn't already upvoted
    if (!UpBtn.hasClass("voted")) {
        var value = DownBtn.hasClass("voted") ? 2 : 1;

        $.ajax({
            url: "/api/questions?answerid=" + UpBtn.attr("data-answerid") + "&value=" + value + "&UserID=@Session["CurrentUserID"]",
            type: "POST",
            success: function (response) {
            votesCountElement.text(parseInt(votesCountElement.text()) + value);
            UpBtn.addClass("voted").attr("src", "/Images/up-color.png");
            DownBtn.removeClass("voted").attr("src", "/Images/down-empty.png");
            },
            error: function (error) {
            console.error("Error while upvoting:", error);
            }
            });
            }
            });

            $(".btnDownVote").click(function () {
            var DownBtn = $(this);
            var UpBtn = DownBtn.parent().find(".btnUpVote");
            var votesCountElement = DownBtn.parent().find(".votescount");

            if (!DownBtn.hasClass("voted")) {
            var value = UpBtn.hasClass("voted") ? -2 : -1;

            $.ajax({
            url: "/api/questions?answerid=" + DownBtn.attr("data-answerid") + "&value=" + value + "&UserID=@Session["CurrentUserID"]",
            type: "POST",
            success: function (response) {
            votesCountElement.text(parseInt(votesCountElement.text()) + value);
            DownBtn.addClass("voted").attr("src", "/Images/down-color.png");
            UpBtn.removeClass("voted").attr("src", "/Images/up-empty.png");
            },
            error: function (error) {
            console.error("Error while downvoting:", error);
            }
            });
            }
            });
</script>


<script>
    $(".editbutton").click(function () {
        // Get the parent container of the current edit button
        var parentDiv = $(this).closest('.needs-validation').show();

        // Hide the current answer paragraph and show the form
        parentDiv.find(".answer").hide();
        parentDiv.find(".needs-validation").removeClass("hidden").show();

        // Hide the edit button itself
        $(this).hide();
    });
</script>
